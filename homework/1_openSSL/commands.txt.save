############## SYMMETRIC ############

# AES 256
openssl rand -out aes_256_bin.key 32                       	# generate sym. key
openssl rand -out aes_256_bin_iv.bin 16				# generate init vector

## encrypt
openssl enc -aes-256-cbc -in plain_text.txt -out cypher_text.enc -nosalt \
  -K $(xxd -p aes_256_bin.key | tr -d '\n') \
  -iv $(xxd -p aes_256_bin_iv.bin | tr -d '\n')

## decrypt
openssl enc -d -aes-256-cbc -in cypher_text.enc -out decrypted.txt \
  -K $(xxd -p aes_256_bin.key | tr -d '\n') \
  -iv $(xxd -p aes_256_bin_iv.bin | tr -d '\n')


# DES

openssl rand -hex 8 > des_hex.key  
openssl rand -hex 8 > des_iv.iv

openssl enc -des-cbc -in plain_text.txt -out cipher_text_des.enc -provider legacy \
  -K $(cat des_hex.key) \
  -iv $(cat des_iv.iv)

openssl enc -d -des -in cipher_text_des.enc -out decipher_text_des.txt -provider legacy \c
  -K $(cat des_hex.key) \
  -iv $(cat des_iv.iv) 


########## ASYMMETRIC ############

openssl genpkey -algorithm RSA -out priv_key.pem \   
	-pkeyopt rsa_keygen_bits:2048 -aes-256-cbc \
	-outpubkey pub_key.pem
# the private key is also encrypted with aes-256, the psw is on a txt file
